def py_SAPHANA_GetIntervalData5minMapMethod(NMIs, startdate = "", enddate = "", 
                                            rrp=True, rrp_states=['NSW1'], suffixes=False, suffix_list=[]):
    
    import pyodbc
    import pandas as pd
    import datetime as dt
    import numpy as np
    
    #Define the connection string details for currently known databases
    agl_databases = {
        "hana": "DRIVER=HDBODBC;SERVERNODE=HANANode1:30015;Trusted_Connection=yes;",
        "frame": "DRIVER={SQL Server Native Client 11.0};SERVER=FRAMEAGLISTENER;Trusted_Connection=yes;",
        "dataglow": "DRIVER={ODBC Driver 17 for SQL Server};SERVER=edpprdsqldw00.database.windows.net;PORT=1433;UID=A139540@agl.com.au;AUTHENTICATION=ActiveDirectoryInteractive;",
        "infoprod": "DRIVER={SQL Server Native Client 11.0};SERVER=infouatlistnernew.agl.int;UID=svc_infoserver;PWD=1nf0s3rv3r@nprd",
        "wholesalepricing": "DRIVER={SQL Server Native Client 11.0};SERVER=SQLFARM1UT4\SQL04;Trusted_Connection=yes;",
    }
    #Connect to Hana via pyodbc
    hana_connection = pyodbc.connect(agl_databases['hana'])
    
    #startdate and enddate checks
    if enddate == "": #No end date specified by user, take three days before today because data is unreliable after that time
        enddate = dt.date.today() - dt.timedelta(3)
    if startdate == "": #No start date specified by user, take one year before enddate
        startdate = dt.date.today() - dt.timedelta(367)
    
    #Convert the list of NMIs (or the single NMI) to required format to SQL
    #('NMI1','NMI2' etc)
    if isinstance(NMIs, list):
        #Convert the NMIs to strings, reduce to 10 characters (which is what HANA needs)
        NMIs = [str(NMI)[0:10] for NMI in NMIs]
        NMIs = "('" + "\',\'".join(NMIs) + "')"
    else: #It's not a list, just a single NMI
        #Just convert to string and take first 10 characters
        NMIs = "('" + str(NMIs)[0:10] + "')"
        
    #If the user doesn't need specific suffixes, ensure they get removed from the SQL query
    if not suffixes:
        includesuffix = '--SUFFIX' #This will comment it out
    else:
        includesuffix = 'SUFFIX'
        
    #Specify the SQL statement
    SQL_Statement_Meter_Data = '''
    SELECT *,
            REPLACE(REPLACE(REPLACE(REPLACE(CHANNELRAW,'KWH_E','1KWH_E'),'KVARH_Q','2KVARH_Q'),'KWH_B','3KWH_B'),'KVARH_K','4KVARH_K') as CHANNEL
    FROM
    (SELECT NMI,
            CONCAT(UOMSTORED, CONCAT('_', DIRECTION)) as CHANNELRAW,
            %s,
            TO_TIMESTAMP(CONCAT(CONCAT(CALDAY, ' '), INTERVALSTART),'YYYY-MM-DD HH24:MI') as timestamp,
            AMT
    FROM 
    (
    SELECT 
        NMI, 
        DIRECTION, 
        %s, 
        CALDAY, 
        UOMSTORED,
        MAP(element_number, 
        1,'00:00',2,'00:05',3,'00:10',4,'00:15',5,'00:20',6,'00:25',7,'00:30',8,'00:35',9,'00:40',10,'00:45',
        11,'00:50',12,'00:55',13,'01:00',14,'01:05',15,'01:10',16,'01:15',17,'01:20',18,'01:25',19,'01:30',20,'01:35',
        21,'01:40',22,'01:45',23,'01:50',24,'01:55',25,'02:00',26,'02:05',27,'02:10',28,'02:15',29,'02:20',30,'02:25',
        31,'02:30',32,'02:35',33,'02:40',34,'02:45',35,'02:50',36,'02:55',37,'03:00',38,'03:05',39,'03:10',40,'03:15',
        41,'03:20',42,'03:25',43,'03:30',44,'03:35',45,'03:40',46,'03:45',47,'03:50',48,'03:55',49,'04:00',50,'04:05',
        51,'04:10',52,'04:15',53,'04:20',54,'04:25',55,'04:30',56,'04:35',57,'04:40',58,'04:45',59,'04:50',60,'04:55',
        61,'05:00',62,'05:05',63,'05:10',64,'05:15',65,'05:20',66,'05:25',67,'05:30',68,'05:35',69,'05:40',70,'05:45',
        71,'05:50',72,'05:55',73,'06:00',74,'06:05',75,'06:10',76,'06:15',77,'06:20',78,'06:25',79,'06:30',80,'06:35',
        81,'06:40',82,'06:45',83,'06:50',84,'06:55',85,'07:00',86,'07:05',87,'07:10',88,'07:15',89,'07:20',90,'07:25',
        91,'07:30',92,'07:35',93,'07:40',94,'07:45',95,'07:50',96,'07:55',97,'08:00',98,'08:05',99,'08:10',100,'08:15',
        101,'08:20',102,'08:25',103,'08:30',104,'08:35',105,'08:40',106,'08:45',107,'08:50',108,'08:55',109,'09:00',110,'09:05',
        111,'09:10',112,'09:15',113,'09:20',114,'09:25',115,'09:30',116,'09:35',117,'09:40',118,'09:45',119,'09:50',120,'09:55',
        121,'10:00',122,'10:05',123,'10:10',124,'10:15',125,'10:20',126,'10:25',127,'10:30',128,'10:35',129,'10:40',130,'10:45',
        131,'10:50',132,'10:55',133,'11:00',134,'11:05',135,'11:10',136,'11:15',137,'11:20',138,'11:25',139,'11:30',140,'11:35',
        141,'11:40',142,'11:45',143,'11:50',144,'11:55',145,'12:00',146,'12:05',147,'12:10',148,'12:15',149,'12:20',150,'12:25',
        151,'12:30',152,'12:35',153,'12:40',154,'12:45',155,'12:50',156,'12:55',157,'13:00',158,'13:05',159,'13:10',160,'13:15',
        161,'13:20',162,'13:25',163,'13:30',164,'13:35',165,'13:40',166,'13:45',167,'13:50',168,'13:55',169,'14:00',170,'14:05',
        171,'14:10',172,'14:15',173,'14:20',174,'14:25',175,'14:30',176,'14:35',177,'14:40',178,'14:45',179,'14:50',180,'14:55',
        181,'15:00',182,'15:05',183,'15:10',184,'15:15',185,'15:20',186,'15:25',187,'15:30',188,'15:35',189,'15:40',190,'15:45',
        191,'15:50',192,'15:55',193,'16:00',194,'16:05',195,'16:10',196,'16:15',197,'16:20',198,'16:25',199,'16:30',200,'16:35',
        201,'16:40',202,'16:45',203,'16:50',204,'16:55',205,'17:00',206,'17:05',207,'17:10',208,'17:15',209,'17:20',210,'17:25',
        211,'17:30',212,'17:35',213,'17:40',214,'17:45',215,'17:50',216,'17:55',217,'18:00',218,'18:05',219,'18:10',220,'18:15',
        221,'18:20',222,'18:25',223,'18:30',224,'18:35',225,'18:40',226,'18:45',227,'18:50',228,'18:55',229,'19:00',230,'19:05',
        231,'19:10',232,'19:15',233,'19:20',234,'19:25',235,'19:30',236,'19:35',237,'19:40',238,'19:45',239,'19:50',240,'19:55',
        241,'20:00',242,'20:05',243,'20:10',244,'20:15',245,'20:20',246,'20:25',247,'20:30',248,'20:35',249,'20:40',250,'20:45',
        251,'20:50',252,'20:55',253,'21:00',254,'21:05',255,'21:10',256,'21:15',257,'21:20',258,'21:25',259,'21:30',260,'21:35',
        261,'21:40',262,'21:45',263,'21:50',264,'21:55',265,'22:00',266,'22:05',267,'22:10',268,'22:15',269,'22:20',270,'22:25',
        271,'22:30',272,'22:35',273,'22:40',274,'22:45',275,'22:50',276,'22:55',277,'23:00',278,'23:05',279,'23:10',280,'23:15',
        281,'23:20',282,'23:25',283,'23:30',284,'23:35',285,'23:40',286,'23:45',287,'23:50',288,'23:55') AS INTERVALSTART,
        MAP(element_number,
        1,SMAPV05001,2,SMAPV05002,3,SMAPV05003,4,SMAPV05004,5,SMAPV05005,6,SMAPV05006,7,SMAPV05007,8,SMAPV05008,9,SMAPV05009,
        10,SMAPV05010,11,SMAPV05011,12,SMAPV05012,13,SMAPV05013,14,SMAPV05014,15,SMAPV05015,16,SMAPV05016,17,SMAPV05017,
        18,SMAPV05018,19,SMAPV05019,20,SMAPV05020,21,SMAPV05021,22,SMAPV05022,23,SMAPV05023,24,SMAPV05024,25,SMAPV05025,
        26,SMAPV05026,27,SMAPV05027,28,SMAPV05028,29,SMAPV05029,30,SMAPV05030,31,SMAPV05031,32,SMAPV05032,33,SMAPV05033,
        34,SMAPV05034,35,SMAPV05035,36,SMAPV05036,37,SMAPV05037,38,SMAPV05038,39,SMAPV05039,40,SMAPV05040,41,SMAPV05041,
        42,SMAPV05042,43,SMAPV05043,44,SMAPV05044,45,SMAPV05045,46,SMAPV05046,47,SMAPV05047,48,SMAPV05048,49,SMAPV05049,
        50,SMAPV05050,51,SMAPV05051,52,SMAPV05052,53,SMAPV05053,54,SMAPV05054,55,SMAPV05055,56,SMAPV05056,57,SMAPV05057,
        58,SMAPV05058,59,SMAPV05059,60,SMAPV05060,61,SMAPV05061,62,SMAPV05062,63,SMAPV05063,64,SMAPV05064,65,SMAPV05065,
        66,SMAPV05066,67,SMAPV05067,68,SMAPV05068,69,SMAPV05069,70,SMAPV05070,71,SMAPV05071,72,SMAPV05072,73,SMAPV05073,
        74,SMAPV05074,75,SMAPV05075,76,SMAPV05076,77,SMAPV05077,78,SMAPV05078,79,SMAPV05079,80,SMAPV05080,81,SMAPV05081,
        82,SMAPV05082,83,SMAPV05083,84,SMAPV05084,85,SMAPV05085,86,SMAPV05086,87,SMAPV05087,88,SMAPV05088,89,SMAPV05089,
        90,SMAPV05090,91,SMAPV05091,92,SMAPV05092,93,SMAPV05093,94,SMAPV05094,95,SMAPV05095,96,SMAPV05096,97,SMAPV05097,
        98,SMAPV05098,99,SMAPV05099,100,SMAPV05100,101,SMAPV05101,102,SMAPV05102,103,SMAPV05103,104,SMAPV05104,105,SMAPV05105,
        106,SMAPV05106,107,SMAPV05107,108,SMAPV05108,109,SMAPV05109,110,SMAPV05110,111,SMAPV05111,112,SMAPV05112,113,SMAPV05113,
        114,SMAPV05114,115,SMAPV05115,116,SMAPV05116,117,SMAPV05117,118,SMAPV05118,119,SMAPV05119,120,SMAPV05120,121,SMAPV05121,
        122,SMAPV05122,123,SMAPV05123,124,SMAPV05124,125,SMAPV05125,126,SMAPV05126,127,SMAPV05127,128,SMAPV05128,129,SMAPV05129,
        130,SMAPV05130,131,SMAPV05131,132,SMAPV05132,133,SMAPV05133,134,SMAPV05134,135,SMAPV05135,136,SMAPV05136,137,SMAPV05137,
        138,SMAPV05138,139,SMAPV05139,140,SMAPV05140,141,SMAPV05141,142,SMAPV05142,143,SMAPV05143,144,SMAPV05144,145,SMAPV05145,
        146,SMAPV05146,147,SMAPV05147,148,SMAPV05148,149,SMAPV05149,150,SMAPV05150,151,SMAPV05151,152,SMAPV05152,153,SMAPV05153,
        154,SMAPV05154,155,SMAPV05155,156,SMAPV05156,157,SMAPV05157,158,SMAPV05158,159,SMAPV05159,160,SMAPV05160,161,SMAPV05161,
        162,SMAPV05162,163,SMAPV05163,164,SMAPV05164,165,SMAPV05165,166,SMAPV05166,167,SMAPV05167,168,SMAPV05168,169,SMAPV05169,
        170,SMAPV05170,171,SMAPV05171,172,SMAPV05172,173,SMAPV05173,174,SMAPV05174,175,SMAPV05175,176,SMAPV05176,177,SMAPV05177,
        178,SMAPV05178,179,SMAPV05179,180,SMAPV05180,181,SMAPV05181,182,SMAPV05182,183,SMAPV05183,184,SMAPV05184,185,SMAPV05185,
        186,SMAPV05186,187,SMAPV05187,188,SMAPV05188,189,SMAPV05189,190,SMAPV05190,191,SMAPV05191,192,SMAPV05192,193,SMAPV05193,
        194,SMAPV05194,195,SMAPV05195,196,SMAPV05196,197,SMAPV05197,198,SMAPV05198,199,SMAPV05199,200,SMAPV05200,201,SMAPV05201,
        202,SMAPV05202,203,SMAPV05203,204,SMAPV05204,205,SMAPV05205,206,SMAPV05206,207,SMAPV05207,208,SMAPV05208,209,SMAPV05209,
        210,SMAPV05210,211,SMAPV05211,212,SMAPV05212,213,SMAPV05213,214,SMAPV05214,215,SMAPV05215,216,SMAPV05216,217,SMAPV05217,
        218,SMAPV05218,219,SMAPV05219,220,SMAPV05220,221,SMAPV05221,222,SMAPV05222,223,SMAPV05223,224,SMAPV05224,225,SMAPV05225,
        226,SMAPV05226,227,SMAPV05227,228,SMAPV05228,229,SMAPV05229,230,SMAPV05230,231,SMAPV05231,232,SMAPV05232,233,SMAPV05233,
        234,SMAPV05234,235,SMAPV05235,236,SMAPV05236,237,SMAPV05237,238,SMAPV05238,239,SMAPV05239,240,SMAPV05240,241,SMAPV05241,
        242,SMAPV05242,243,SMAPV05243,244,SMAPV05244,245,SMAPV05245,246,SMAPV05246,247,SMAPV05247,248,SMAPV05248,249,SMAPV05249,
        250,SMAPV05250,251,SMAPV05251,252,SMAPV05252,253,SMAPV05253,254,SMAPV05254,255,SMAPV05255,256,SMAPV05256,257,SMAPV05257,
        258,SMAPV05258,259,SMAPV05259,260,SMAPV05260,261,SMAPV05261,262,SMAPV05262,263,SMAPV05263,264,SMAPV05264,265,SMAPV05265,
        266,SMAPV05266,267,SMAPV05267,268,SMAPV05268,269,SMAPV05269,270,SMAPV05270,271,SMAPV05271,272,SMAPV05272,273,SMAPV05273,
        274,SMAPV05274,275,SMAPV05275,276,SMAPV05276,277,SMAPV05277,278,SMAPV05278,279,SMAPV05279,280,SMAPV05280,281,SMAPV05281,
        282,SMAPV05282,283,SMAPV05283,284,SMAPV05284,285,SMAPV05285,286,SMAPV05286,287,SMAPV05287,288,SMAPV05288) AS AMT
    FROM "_SYS_BIC"."merchant/IMD05_VW", SERIES_GENERATE_INTEGER(1, 1, 289)
    WHERE NMI IN %s -- PYTHON FIXED NMI LIST
    AND CALDAY BETWEEN %s AND %s -- PYTHON DATE RANGE
    AND QUALITYSCORE in ('60','62','64','66','68') -- QUALITY SCORES TO INCLUDE
    --AND SUFFIX in ('E8', 'E9')
    AND DIRECTION in ('E','Q','B','K') -- CHANNELS TO INCLUDE
    -- Exclude the Check channels. They are not master. We don't like them.
    AND DIRECTION <> 'C' 
    AND DIRECTION <> 'F' 
    AND DIRECTION <> 'L' 
    AND DIRECTION <> 'R'
    ORDER BY NMI, CALDAY, INTERVALSTART, DIRECTION))
    ''' % (includesuffix, includesuffix, NMIs, "'" + startdate.strftime('%Y%m%d') + "'", "'" + enddate.strftime('%Y%m%d') + "'")

    #Execute the SQL statement using the hana database connection
    interval_data = pd.read_sql(SQL_Statement_Meter_Data, hana_connection)
    #Apply logic depending on the user's input r.e. suffixes/no suffixes.
    if not suffixes:
        #Pivot the data across all suffixes and set the aggregate function to be the sum across those channels
        interval_data = pd.pivot_table(interval_data, index='TIMESTAMP', columns=['NMI','CHANNEL'], values='AMT', aggfunc=np.sum)
    else:
        #Pivot, but use the raw suffixes instead of the channels
        interval_data = pd.pivot_table(interval_data, index='TIMESTAMP', columns=['NMI','SUFFIX'], values='AMT', aggfunc=np.sum)
        #Check if a SPECIFIC list of suffixes has been specified and delete columns that don't match it.
        if len(suffix_list) > 0:
            for column in output.columns:
                #If the column is NOT in the inputted suffix list, drop it. 
                if column[1] not in suffix_list:
                    interval_data.drop(column, axis=1, inplace=True)
    interval_data = interval_data.reset_index()
    
    
    #Check if the user also wants to acquire 5min Wholesale Settlement pricing and attached it to the data
    if rrp:
        SQL_Statement_RRP='''
        SELECT *, TO_TIMESTAMP(CONCAT(CONCAT(CALDAY, ' '), INTERVALSTART),'YYYY-MM-DD HH24:MI') as timestamp 
        FROM 
        (
        SELECT 
            REGIONID, 
            CALDAY, 
            MAP(element_number,
            1,'00:00',2,'00:05',3,'00:10',4,'00:15',5,'00:20',6,'00:25',7,'00:30',8,'00:35',9,'00:40',10,'00:45',
            11,'00:50',12,'00:55',13,'01:00',14,'01:05',15,'01:10',16,'01:15',17,'01:20',18,'01:25',19,'01:30',20,'01:35',
            21,'01:40',22,'01:45',23,'01:50',24,'01:55',25,'02:00',26,'02:05',27,'02:10',28,'02:15',29,'02:20',30,'02:25',
            31,'02:30',32,'02:35',33,'02:40',34,'02:45',35,'02:50',36,'02:55',37,'03:00',38,'03:05',39,'03:10',40,'03:15',
            41,'03:20',42,'03:25',43,'03:30',44,'03:35',45,'03:40',46,'03:45',47,'03:50',48,'03:55',49,'04:00',50,'04:05',
            51,'04:10',52,'04:15',53,'04:20',54,'04:25',55,'04:30',56,'04:35',57,'04:40',58,'04:45',59,'04:50',60,'04:55',
            61,'05:00',62,'05:05',63,'05:10',64,'05:15',65,'05:20',66,'05:25',67,'05:30',68,'05:35',69,'05:40',70,'05:45',
            71,'05:50',72,'05:55',73,'06:00',74,'06:05',75,'06:10',76,'06:15',77,'06:20',78,'06:25',79,'06:30',80,'06:35',
            81,'06:40',82,'06:45',83,'06:50',84,'06:55',85,'07:00',86,'07:05',87,'07:10',88,'07:15',89,'07:20',90,'07:25',
            91,'07:30',92,'07:35',93,'07:40',94,'07:45',95,'07:50',96,'07:55',97,'08:00',98,'08:05',99,'08:10',100,'08:15',
            101,'08:20',102,'08:25',103,'08:30',104,'08:35',105,'08:40',106,'08:45',107,'08:50',108,'08:55',109,'09:00',110,'09:05',
            111,'09:10',112,'09:15',113,'09:20',114,'09:25',115,'09:30',116,'09:35',117,'09:40',118,'09:45',119,'09:50',120,'09:55',
            121,'10:00',122,'10:05',123,'10:10',124,'10:15',125,'10:20',126,'10:25',127,'10:30',128,'10:35',129,'10:40',130,'10:45',
            131,'10:50',132,'10:55',133,'11:00',134,'11:05',135,'11:10',136,'11:15',137,'11:20',138,'11:25',139,'11:30',140,'11:35',
            141,'11:40',142,'11:45',143,'11:50',144,'11:55',145,'12:00',146,'12:05',147,'12:10',148,'12:15',149,'12:20',150,'12:25',
            151,'12:30',152,'12:35',153,'12:40',154,'12:45',155,'12:50',156,'12:55',157,'13:00',158,'13:05',159,'13:10',160,'13:15',
            161,'13:20',162,'13:25',163,'13:30',164,'13:35',165,'13:40',166,'13:45',167,'13:50',168,'13:55',169,'14:00',170,'14:05',
            171,'14:10',172,'14:15',173,'14:20',174,'14:25',175,'14:30',176,'14:35',177,'14:40',178,'14:45',179,'14:50',180,'14:55',
            181,'15:00',182,'15:05',183,'15:10',184,'15:15',185,'15:20',186,'15:25',187,'15:30',188,'15:35',189,'15:40',190,'15:45',
            191,'15:50',192,'15:55',193,'16:00',194,'16:05',195,'16:10',196,'16:15',197,'16:20',198,'16:25',199,'16:30',200,'16:35',
            201,'16:40',202,'16:45',203,'16:50',204,'16:55',205,'17:00',206,'17:05',207,'17:10',208,'17:15',209,'17:20',210,'17:25',
            211,'17:30',212,'17:35',213,'17:40',214,'17:45',215,'17:50',216,'17:55',217,'18:00',218,'18:05',219,'18:10',220,'18:15',
            221,'18:20',222,'18:25',223,'18:30',224,'18:35',225,'18:40',226,'18:45',227,'18:50',228,'18:55',229,'19:00',230,'19:05',
            231,'19:10',232,'19:15',233,'19:20',234,'19:25',235,'19:30',236,'19:35',237,'19:40',238,'19:45',239,'19:50',240,'19:55',
            241,'20:00',242,'20:05',243,'20:10',244,'20:15',245,'20:20',246,'20:25',247,'20:30',248,'20:35',249,'20:40',250,'20:45',
            251,'20:50',252,'20:55',253,'21:00',254,'21:05',255,'21:10',256,'21:15',257,'21:20',258,'21:25',259,'21:30',260,'21:35',
            261,'21:40',262,'21:45',263,'21:50',264,'21:55',265,'22:00',266,'22:05',267,'22:10',268,'22:15',269,'22:20',270,'22:25',
            271,'22:30',272,'22:35',273,'22:40',274,'22:45',275,'22:50',276,'22:55',277,'23:00',278,'23:05',279,'23:10',280,'23:15',
            281,'23:20',282,'23:25',283,'23:30',284,'23:35',285,'23:40',286,'23:45',287,'23:50',288,'23:55') AS INTERVALSTART,
            MAP(element_number,
            1,RRP001,2,RRP002,3,RRP003,4,RRP004,5,RRP005,6,RRP006,7,RRP007,8,RRP008,9,RRP009,10,RRP010,
            11,RRP011,12,RRP012,13,RRP013,14,RRP014,15,RRP015,16,RRP016,17,RRP017,18,RRP018,19,RRP019,20,RRP020,
            21,RRP021,22,RRP022,23,RRP023,24,RRP024,25,RRP025,26,RRP026,27,RRP027,28,RRP028,29,RRP029,30,RRP030,
            31,RRP031,32,RRP032,33,RRP033,34,RRP034,35,RRP035,36,RRP036,37,RRP037,38,RRP038,39,RRP039,40,RRP040,
            41,RRP041,42,RRP042,43,RRP043,44,RRP044,45,RRP045,46,RRP046,47,RRP047,48,RRP048,49,RRP049,50,RRP050,
            51,RRP051,52,RRP052,53,RRP053,54,RRP054,55,RRP055,56,RRP056,57,RRP057,58,RRP058,59,RRP059,60,RRP060,
            61,RRP061,62,RRP062,63,RRP063,64,RRP064,65,RRP065,66,RRP066,67,RRP067,68,RRP068,69,RRP069,70,RRP070,
            71,RRP071,72,RRP072,73,RRP073,74,RRP074,75,RRP075,76,RRP076,77,RRP077,78,RRP078,79,RRP079,80,RRP080,
            81,RRP081,82,RRP082,83,RRP083,84,RRP084,85,RRP085,86,RRP086,87,RRP087,88,RRP088,89,RRP089,90,RRP090,
            91,RRP091,92,RRP092,93,RRP093,94,RRP094,95,RRP095,96,RRP096,97,RRP097,98,RRP098,99,RRP099,100,RRP100,
            101,RRP101,102,RRP102,103,RRP103,104,RRP104,105,RRP105,106,RRP106,107,RRP107,108,RRP108,109,RRP109,110,RRP110,
            111,RRP111,112,RRP112,113,RRP113,114,RRP114,115,RRP115,116,RRP116,117,RRP117,118,RRP118,119,RRP119,120,RRP120,
            121,RRP121,122,RRP122,123,RRP123,124,RRP124,125,RRP125,126,RRP126,127,RRP127,128,RRP128,129,RRP129,130,RRP130,
            131,RRP131,132,RRP132,133,RRP133,134,RRP134,135,RRP135,136,RRP136,137,RRP137,138,RRP138,139,RRP139,140,RRP140,
            141,RRP141,142,RRP142,143,RRP143,144,RRP144,145,RRP145,146,RRP146,147,RRP147,148,RRP148,149,RRP149,150,RRP150,
            151,RRP151,152,RRP152,153,RRP153,154,RRP154,155,RRP155,156,RRP156,157,RRP157,158,RRP158,159,RRP159,160,RRP160,
            161,RRP161,162,RRP162,163,RRP163,164,RRP164,165,RRP165,166,RRP166,167,RRP167,168,RRP168,169,RRP169,170,RRP170,
            171,RRP171,172,RRP172,173,RRP173,174,RRP174,175,RRP175,176,RRP176,177,RRP177,178,RRP178,179,RRP179,180,RRP180,
            181,RRP181,182,RRP182,183,RRP183,184,RRP184,185,RRP185,186,RRP186,187,RRP187,188,RRP188,189,RRP189,190,RRP190,
            191,RRP191,192,RRP192,193,RRP193,194,RRP194,195,RRP195,196,RRP196,197,RRP197,198,RRP198,199,RRP199,200,RRP200,
            201,RRP201,202,RRP202,203,RRP203,204,RRP204,205,RRP205,206,RRP206,207,RRP207,208,RRP208,209,RRP209,210,RRP210,
            211,RRP211,212,RRP212,213,RRP213,214,RRP214,215,RRP215,216,RRP216,217,RRP217,218,RRP218,219,RRP219,220,RRP220,
            221,RRP221,222,RRP222,223,RRP223,224,RRP224,225,RRP225,226,RRP226,227,RRP227,228,RRP228,229,RRP229,230,RRP230,
            231,RRP231,232,RRP232,233,RRP233,234,RRP234,235,RRP235,236,RRP236,237,RRP237,238,RRP238,239,RRP239,240,RRP240,
            241,RRP241,242,RRP242,243,RRP243,244,RRP244,245,RRP245,246,RRP246,247,RRP247,248,RRP248,249,RRP249,250,RRP250,
            251,RRP251,252,RRP252,253,RRP253,254,RRP254,255,RRP255,256,RRP256,257,RRP257,258,RRP258,259,RRP259,260,RRP260,
            261,RRP261,262,RRP262,263,RRP263,264,RRP264,265,RRP265,266,RRP266,267,RRP267,268,RRP268,269,RRP269,270,RRP270,
            271,RRP271,272,RRP272,273,RRP273,274,RRP274,275,RRP275,276,RRP276,277,RRP277,278,RRP278,279,RRP279,280,RRP280,
            281,RRP281,282,RRP282,283,RRP283,284,RRP284,285,RRP285,286,RRP286,287,RRP287,288,RRP288) AS RRP
        FROM "_SYS_BIC"."merchant/HANA_RRP_05_VW", SERIES_GENERATE_INTEGER(1, 1, 289)
        WHERE CALDAY BETWEEN %s AND %s -- PYTHON DATE RANGE
        ORDER BY CALDAY, INTERVALSTART, REGIONID)
        ''' % ("'" + startdate.strftime('%Y%m%d') + "'", "'" + enddate.strftime('%Y%m%d') + "'")

        pricing = pd.read_sql(SQL_Statement_RRP, hana_connection)
        pricing = pd.pivot_table(pricing, index='TIMESTAMP', columns='REGIONID', values='RRP', aggfunc=np.sum)
        pricing = pricing.fillna(0)
        #Check if the user only wants settlement pricing for specific state(s)
        if rrp_states != ['ALL']:
            pricing = pricing[rrp_states] #the parameter is provided as a list of strings, thus we can index directly
        else:
            pricing = pricing[['NSW1','VIC1','SA1','QLD1','TAS1']]
        pricing = pricing.reset_index()
        #Need to make this a multi-level index so that it can be merged with the interval data pull
        pricing.columns = pd.MultiIndex.from_product([[''],pricing.columns])
    
    #Concat the two dataframes together
    interval_data = pd.concat([pricing, interval_data], axis=1)
    print(interval_data.head())
    return interval_data